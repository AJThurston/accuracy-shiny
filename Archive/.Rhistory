server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, round=-2),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, round=FALSE),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
help("numericInput")
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h5("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(-3,3),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data)
mdx = median(data)
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data)
mdx = median(data)
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data), lwd=5, col="Black",add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data),add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(sn)
library(modeest)
server <- function(input, output) {
output$distPlot = renderPlot({
data =  as.numeric(rsn(n=input$num, xi=input$mean, omega=input$sd, alpha=input$skew))
myhist = hist(
data,
breaks=input$bins,
xlab="",
xlim=c(min(data),max(data)),
main=""
)
curve(dnorm(x, mean=mean(data), sd=median(data),add=TRUE))
#  multiplier = myhist$counts/myhist$density
#  mydensity = density(data)
#  mydensity$y = mydensity$y * multiplier[1]
#  lines(mydensity, lwd = 5, col = "Black")
mx = mean(data),
mdx = median(data),
# modex = mlv(data, method = "mfv")
abline(v = mx, col = "red", lwd = 2)
abline(v = mdx, col = "blue", lwd = 2)
# abline(v = modex, col = "green", lwd = 2)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("mean", label = h3("Mean"), value = 0, step = .01),
numericInput("sd", label = h3("Standard Deviation"), value = 1),
numericInput("skew", label = h3("Skewness"), value = 0),
numericInput("num", label = h3("Sample Size"), value = 1000),
numericInput("bins", label = h3("Bins"), value = 10)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
library(shiny); print(source('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/Spearman Brown Calculator.R')$value)
print(source('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/Spearman Brown Calculator.R')$value)
print(source('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/Spearman Brown Calculator.R')$value)
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
install.packages(car)
install.packages("car")
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
update.packages(checkBuilt = TRUE)
install.packages(c("abind", "arm", "BH", "caret", "crayon", "curl", "DBI", "devtools", "DiagrammeR", "digest", "dplyr", "evaluate", "fGarch", "formatR", "ggThemeAssist", "git2r", "googleVis", "gss", "highr", "Hmisc", "htmlwidgets", "httr", "installr", "irlba", "jsonlite", "knitr", "lattice", "lavaan", "lubridate", "maps", "metafor", "mgcv", "mime", "MplusAutomation", "multcomp", "nlme", "numDeriv", "openssl", "packrat", "permute", "plotly", "plyr", "psych", "quantreg", "R6", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readr", "Rfacebook", "rgeos", "rgl", "RgoogleMaps", "rmarkdown", "RMySQL", "RODBC", "RPostgreSQL", "rstudioapi", "rversions", "sem", "SparseM", "stabledist", "stringi", "stringr", "swirl", "texreg", "tidyr", "vegan", "visNetwork", "withr", "XLConnect", "XLConnectJars", "xtable", "zoo"))
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
shiny::runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
roundUp <- function(x,to=1)
{
to*(x%/%to + as.logical(x%%to))
}
roundup(4.1)
roundUp(4.1)
roundUp(6.78)
roundUp(6.01)
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-BrownCalulator')
getwd()
library(shiny); print(source('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/Error Simulator/ErrorSimulator.R')$value)
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/Error Simulator/DeviationShinyApp')
z <- c(
c(8.83,8.89,8.81,8.87,8.9,8.87),
c(8.89,8.94,8.85,8.94,8.96,8.92),
c(8.84,8.9,8.82,8.92,8.93,8.91),
c(8.79,8.85,8.79,8.9,8.94,8.92),
c(8.79,8.88,8.81,8.9,8.95,8.92),
c(8.8,8.82,8.78,8.91,8.94,8.92),
c(8.75,8.78,8.77,8.91,8.95,8.92),
c(8.8,8.8,8.77,8.91,8.95,8.94),
c(8.74,8.81,8.76,8.93,8.98,8.99),
c(8.89,8.99,8.92,9.1,9.13,9.11),
c(8.97,8.97,8.91,9.09,9.11,9.11),
c(9.04,9.08,9.05,9.25,9.28,9.27),
c(9,9.01,9,9.2,9.23,9.2),
c(8.99,8.99,8.98,9.18,9.2,9.19),
c(8.93,8.97,8.97,9.18,9.2,9.18)
)
z
install.packages("plot_ly")
install.packages("plotly")
reliability.test.length <- read.csv("C:/Users/AJ Thurston/Desktop/reliability test length.xlsx", row.names=1, sep="")
View(reliability.test.length)
View(reliability.test.length)
View(reliability.test.length)
reliability.test.length <- read.delim("C:/Users/AJ Thurston/Desktop/reliability test length.xlsx", row.names=1, quote="")
View(reliability.test.length)
View(reliability.test.length)
shiny::runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-Brown App (18Oct2016)/Spearman-Brown.App.18Oct2016')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-Brown App (18Oct2016)/Spearman-Brown.App.18Oct2016')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-Brown App (18Oct2016)/Spearman-Brown.App.18Oct2016')
runApp('C:/Users/AJ Thurston/Dropbox/Teaching/1. Fall 2016/Supplementary Materials/DeviationShinyApp/Spearman-Brown App (18Oct2016)/Spearman-Brown.App.18Oct2016')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
